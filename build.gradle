import com.modrinth.minotaur.TaskModrinthUpload
import de.undercouch.gradle.tasks.download.Download

plugins {
    id 'fabric-loom'
    id 'maven-publish'
    id 'org.jetbrains.kotlin.jvm'
    id 'com.matthewprenger.cursegradle'
    id 'com.modrinth.minotaur'
    id 'de.undercouch.download'
}

sourceCompatibility = JavaVersion.VERSION_16
targetCompatibility = JavaVersion.VERSION_16

archivesBaseName = project.archives_base_name
version = project.mod_version
group = project.maven_group

minecraft {
    accessWidener = file("src/main/resources/magical-mahou.accesswidener")
}

repositories {
    maven { url = "https://maven.fabricmc.net/" }
    maven {
        // LBA, LNS, and SimplePipes
        name = "BuildCraft"
        url = "https://mod-buildcraft.com/maven"
    }
    maven {
        // LibGUI
        name = "CottonMC"
        url = "https://server.bbkr.space/artifactory/libs-release"
        content {
            includeGroup 'io.github.cottonmc'
        }
    }
    maven {
        name = 'Ladysnake Mods'
        url = 'https://ladysnake.jfrog.io/artifactory/mods'
    }
    if (isTerraformersMCMavenUp()) {
        maven {
            // Mod Menu
            name = "TerraformersMC"
            url = "https://maven.terraformersmc.com/releases/"
            content {
                includeGroup 'com.terraformersmc'
            }
        }
    }
    mavenCentral()
    maven {
        // where Grondag's mods live
        name = "dblsaiko"
        url = "https://maven.dblsaiko.net/"
    }
    maven {
        // Cloth Config (required by Canvas)
        name = "shedaniel"
        url = "https://maven.shedaniel.me/"
    }
    maven {
        // REI, odds and ends
        name = "CurseForge"
        url = "https://minecraft.curseforge.com/api/maven"
    }
    maven {
        // Myron OBJ loader
        name = "Haven-King"
        url = "https://hephaestus.dev/release"
    }

    // Emotecraft repositories
    if (Boolean.parseBoolean(System.getProperty("com.kneelawk.magicalmahou.useemotecraft", "false"))) {
        maven {
            url "http://kosmx.ddns.net/maven/"
            allowInsecureProtocol = true //No HTTPS
        }
    }
}

dependencies {
    //to change the versions see the gradle.properties file
    minecraft "com.mojang:minecraft:${project.minecraft_version}"
    mappings "net.fabricmc:yarn:${project.yarn_mappings}:v2"
    modImplementation "net.fabricmc:fabric-loader:${project.loader_version}"

    // Fabric API. This is technically optional, but you probably want it anyway.
    modImplementation "net.fabricmc.fabric-api:fabric-api:${project.fabric_version}"

    modImplementation "net.fabricmc:fabric-language-kotlin:${project.fabric_kotlin_version}"


    // Non-Fabric dependencies

    // Api dependencies

    modApi("io.github.cottonmc:LibGui:${project.libgui_version}") {
        exclude group: 'net.fabricmc.fabric-api'
    }
    include "io.github.cottonmc:LibGui:${project.libgui_version}"

    // Implementation dependencies

    modImplementation("io.github.ladysnake:satin:${project.satin_version}") {
        exclude group: 'net.fabricmc.fabric-api'
    }
    include "io.github.ladysnake:satin:${project.satin_version}"

    def cardinalComponents = ["cardinal-components-base", "cardinal-components-util", "cardinal-components-entity"]
    cardinalComponents.each { component ->
        modImplementation("io.github.onyxstudios.Cardinal-Components-API:${component}:${project.cardinal_version}") {
            exclude group: 'net.fabricmc.fabric-api'
        }
        include "io.github.onyxstudios.Cardinal-Components-API:${component}:${project.cardinal_version}"
    }

    modImplementation("dev.monarkhes:myron:${project.myron_version}") {
        exclude group: 'net.fabricmc.fabric-api'
    }
    include "dev.monarkhes:myron:${project.myron_version}"

    modImplementation("alexiil.mc.lib:libnetworkstack-base:${project.lns_version}") {
        exclude group: 'net.fabricmc.fabric-api'
    }
    include "alexiil.mc.lib:libnetworkstack-base:${project.lns_version}"


    // Runtime dependencies (compatibility testing mostly)

    def modsDir = layout.projectDirectory.dir("run/mods")

    if (isTerraformersMCMavenUp()) {
        modRuntime("com.terraformersmc:modmenu:${project.modmenu_version}") {
            exclude group: "net.fabricmc.fabric-api"
        }
    }

    // Only use canvas if the com.kneelawk.magicalmahou.usecanvas system property is set
    if (Boolean.parseBoolean(System.getProperty("com.kneelawk.magicalmahou.usecanvas", "false"))) {
        modRuntime("grondag:canvas-mc117-1.17:${project.canvas_version}") {
            exclude group: "net.fabricmc.fabric-api"
        }
        modRuntime("grondag:bitraster:${project.bitraster_version}") {
            exclude group: "net.fabricmc.fabric-api"
        }
    }

    // Only use BendyLib and Emotecraft if the com.kneelawk.magicalmahou.useemotecraft property is set
    def emotecraftFile = modsDir.file("emotecraft-for-MC1.17-${project.emotecraft_version}-fabric.jar")
    if (Boolean.parseBoolean(System.getProperty("com.kneelawk.magicalmahou.useemotecraft", "false"))) {
        modRuntime("io.github.kosmx:bendy-lib:${project.bendylib_version}") {
            exclude group: "net.fabricmc.fabric-api"
        }
        download {
            dest emotecraftFile
            src "https://api.modrinth.com/maven/maven/modrinth/emotecraft/${project.emotecraft_version}/emotecraft-for-MC1.17-${project.emotecraft_version}-fabric.jar"
            overwrite false
        }
    } else {
        emotecraftFile.asFile.delete()
    }

    modRuntime("me.shedaniel:RoughlyEnoughItems-fabric:${project.rei_version}") {
        exclude group: "net.fabricmc.fabric-api"
    }
    modRuntime("dev.architectury:architectury-fabric:${project.architectury_version}") {
        exclude group: "net.fabricmc.fabric-api"
    }

    compileOnly "org.apiguardian:apiguardian-api:${project.apiguardian_version}"
    compileOnly "com.google.code.findbugs:jsr305:${project.jsr305_version}"
    compileOnly "com.demonwav.mcdev:annotations:${project.mcdev_annotations_version}"
}

processResources {
    inputs.property "version", project.version

    exclude("**/*.xcf")

    filesMatching("fabric.mod.json") {
        expand "version": project.version
    }
}

// ensure that the encoding is set to UTF-8, no matter what the system default is
// this fixes some edge cases with special characters not displaying correctly
// see http://yodaconditions.net/blog/fix-for-java-file-encoding-problems-with-gradle.html
tasks.withType(JavaCompile) {
    // ensure that the encoding is set to UTF-8, no matter what the system default is
    // this fixes some edge cases with special characters not displaying correctly
    // see http://yodaconditions.net/blog/fix-for-java-file-encoding-problems-with-gradle.html
    // If Javadoc is generated, this must be specified in that task too.
    it.options.encoding = "UTF-8"

    // Minecraft 1.17 (21w19a) upwards uses Java 16.
    it.options.release = 16
}

// Loom will automatically attach sourcesJar to a RemapSourcesJar task and to the "build" task
// if it is present.
// If you remove this task, sources will not be generated.
task sourcesJar(type: Jar, dependsOn: classes) {
    classifier = "sources"
    from sourceSets.main.allSource
}

jar {
    from("LICENSE") {
        rename { "${it}_${project.archivesBaseName}" }
    }
}

runClient {
    args("--width", "1280", "--height", "720")
}

// configure the maven publication
publishing {
    publications {
        mavenJava(MavenPublication) {
            // add all the jars that should be included when publishing to maven
            artifact(remapJar) {
                builtBy remapJar
            }
            artifact(sourcesJar) {
                builtBy remapSourcesJar
            }
        }
    }

    // select the repositories you want to publish to
    repositories {
        // uncomment to publish to the local maven
        // mavenLocal()
    }
}

compileKotlin.kotlinOptions.jvmTarget = "16"

if (System.getenv("CURSE_API_KEY") != null) {
    curseforge {
        apiKey = System.getenv("CURSE_API_KEY")
        project {
            id = '499532'
            changelogType = 'markdown'
            changelog = file("changelogs/changelog-${project.mod_version}.md")
            releaseType = project.mod_release_type
            project.publish_minecraft_versions.split(",").toList().forEach {
                addGameVersion it.trim()
            }
            addGameVersion 'Java 16'
            addGameVersion 'Fabric'
            mainArtifact(remapJar)
            relations {
                requiredDependency 'fabric-api'
                requiredDependency 'fabric-language-kotlin'
            }
        }
        options {
            forgeGradleIntegration = false
        }
    }

    afterEvaluate {
        tasks.curseforge499532.dependsOn remapJar
    }
}

if (System.getenv("MODRINTH_API_KEY") != null) {
    task publishModrinth(type: TaskModrinthUpload, dependsOn: remapJar) {
        group 'Upload'
        description 'Publish this mod to Modrinth'

        token = System.getenv("MODRINTH_API_KEY")
        projectId = 'CqZmZ0Hh'
        versionNumber = project.mod_version
        uploadFile = remapJar
        versionType = project.mod_release_type
        changelog = file("changelogs/changelog-${project.mod_version}.md").text
        project.publish_minecraft_versions.split(",").toList().forEach {
            addGameVersion it.trim()
        }
        addLoader 'fabric'
    }
}

static boolean isTerraformersMCMavenUp() {
    try {
        URL url = new URL("https://maven.terraformersmc.com/releases/com/terraformersmc/modmenu/")
        HttpURLConnection connection = (HttpURLConnection) url.openConnection()
        connection.setRequestMethod("GET")
        connection.connect()

        int responseClass = connection.getResponseCode().intdiv(100)
        return responseClass != 4 && responseClass != 5
    } catch (IOException e) {
        println("Error connecting to TerraformersMC maven", e)
    }
    return false
}

/*
 * Cache system: copied from https://github.com/michel-kraemer/gradle-download-task/issues/89#issuecomment-357546805
 */

def urlToCachePath(url) {
    def domainStart = url.indexOf("//")
    if (domainStart == -1)
        domainStart = 0
    else
        domainStart += 2
    def urlWithoutProtocol = url.substring(domainStart)
    def restStart = urlWithoutProtocol.indexOf("/")
    if (restStart == -1)
        restStart = urlWithoutProtocol.length
    def domain = urlWithoutProtocol.substring(0, restStart)
    def queryStart = urlWithoutProtocol.indexOf('?')
    if (queryStart == -1)
        queryStart = urlWithoutProtocol.length()
    def rest = urlWithoutProtocol.substring(restStart, queryStart)
    return System.getProperty("user.home") +
            "/.gradle/caches/modules-2/files-2.1/de.undercouch/cache/" +
            domain.tokenize('.').reverse().join('/') + rest
}

def urlToCachedFile(url) {
    def fileStart = url.lastIndexOf("/") + 1
    def fileEnd = url.indexOf("?")
    if (fileEnd == -1)
        fileEnd = url.length()
    def file = url.substring(fileStart, fileEnd)
    return file
}

def createCacheTask(url) {
    task "cacheFile_${url.hashCode()}"(type: Download) {
        def destPath = urlToCachePath(url)
        src url
        dest destPath
        overwrite false
    }
}

def createDownloadTask(url, dest) {
    createCacheTask(url)
    task "download_${url.hashCode()}_${dest.hashCode()}"(type: Copy) {
        dependsOn "cacheFile_${url.hashCode()}"
        def destPath = urlToCachePath(url)
        from(destPath) {
            include urlToCachedFile(url)
        }
        into dest
    }
}
